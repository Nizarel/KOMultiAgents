name: Azure Container Apps Deploy2

on:
  push:
    branches: [ master, develop ]
    paths:
      - 'src/api/**'
      - 'src/web/**'
      - '.github/workflows/depworkflow.yml'
  pull_request:
    branches: [ master ]
    paths:
      - 'src/api/**'
      - 'src/web/**'
  workflow_dispatch:
    
env:
  # Azure Container Registry details
  AZURE_CONTAINER_REGISTRY: cr3rbky3yz3zumq
  REGISTRY_URL: cr3rbky3yz3zumq.azurecr.io
  
  # Container App Environment
  CONTAINER_APPS_ENVIRONMENT: agent-ca-env
  RESOURCE_GROUP: rg-crtwriter
  
  API_IMAGE_NAME: agent-api80
  WEB_IMAGE_NAME: agent-web80

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: 'Checkout GitHub Action'
        uses: actions/checkout@v4

      - name: Set up variables
        id: vars
        run: |
          BUILD_NUMBER=${{ github.run_number }}
          SHORT_SHA=${GITHUB_SHA::8}
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          
          # Set image tags
          API_IMAGE_TAG="${{ env.REGISTRY_URL }}/${{ env.API_IMAGE_NAME }}:${BUILD_NUMBER}"
          WEB_IMAGE_TAG="${{ env.REGISTRY_URL }}/${{ env.WEB_IMAGE_NAME }}:${BUILD_NUMBER}"
          
          echo "build_number=${BUILD_NUMBER}" >> $GITHUB_OUTPUT
          echo "short_sha=${SHORT_SHA}" >> $GITHUB_OUTPUT
          echo "branch_name=${BRANCH_NAME}" >> $GITHUB_OUTPUT
          echo "api_image_tag=${API_IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "web_image_tag=${WEB_IMAGE_TAG}" >> $GITHUB_OUTPUT
          
          echo "🏷️ Image tags:"
          echo "API: ${API_IMAGE_TAG}"
          echo "Web: ${WEB_IMAGE_TAG}"
      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AGENTAPI2_AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AGENTAPI2_AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AGENTAPI2_AZURE_SUBSCRIPTION_ID }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Azure Container Registry
        run: |
          az acr login --name ${{ env.AZURE_CONTAINER_REGISTRY }}
          # Enable admin user for ACR (if not already enabled)
          az acr update --name ${{ env.AZURE_CONTAINER_REGISTRY }} --admin-enabled true
          
          # Verify admin credentials are available
          echo "🔍 Verifying ACR admin credentials..."
          ACR_USERNAME=$(az acr credential show --name ${{ env.AZURE_CONTAINER_REGISTRY }} --query "username" -o tsv)
          if [ -n "$ACR_USERNAME" ]; then
            echo "✅ ACR admin credentials successfully retrieved"
            echo "🔑 Username: $ACR_USERNAME"
          else
            echo "❌ Failed to retrieve ACR admin credentials"
            exit 1
          fi
      - name: Build and push API Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./src/api
          file: ./src/api/Dockerfile
          push: true
          tags: ${{ steps.vars.outputs.api_image_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Build and push Web Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./src/web
          file: ./src/web/Dockerfile
          push: true
          tags: ${{ steps.vars.outputs.web_image_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Deploy API to Azure Container Apps
        run: |
          # Get the managed identity resource ID
          MANAGED_IDENTITY_ID="/subscriptions/b6e08f96-9a62-46d0-b276-8dc80e6bc02a/resourceGroups/${{ env.RESOURCE_GROUP }}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id-3rbky3yz3zumq"
          
          echo "🔑 Using managed identity: $MANAGED_IDENTITY_ID"
          
          # Get ACR admin credentials
          ACR_USERNAME=$(az acr credential show --name ${{ env.AZURE_CONTAINER_REGISTRY }} --query "username" -o tsv)
          ACR_PASSWORD=$(az acr credential show --name ${{ env.AZURE_CONTAINER_REGISTRY }} --query "passwords[0].value" -o tsv)
          
          echo "🔑 Retrieved ACR credentials for registry: ${{ env.REGISTRY_URL }}"
          echo "🔑 ACR Username: ${ACR_USERNAME}"
          
          # Check if the container app exists
          if az containerapp show --name ${{ env.API_IMAGE_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} &>/dev/null; then
            echo "✅ Updating existing API container app..."
            az containerapp update \
              --name ${{ env.API_IMAGE_NAME }} \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --image ${{ steps.vars.outputs.api_image_tag }} \
              --revision-suffix "r${{ steps.vars.outputs.build_number }}" \
              --set-env-vars \
                ENVIRONMENT=production \
                BUILD_NUMBER=${{ steps.vars.outputs.build_number }} \
                GIT_SHA=${{ steps.vars.outputs.short_sha }} \
                PORT=8000 \
                PYTHONUNBUFFERED=1 \
                API_SERVICE_ACA_NAME=agent-api \
                APPINSIGHTS_CONNECTIONSTRING="InstrumentationKey=a941babe-3b75-463e-ae64-adbb4a268a54;IngestionEndpoint=https://eastus2-3.in.applicationinsights.azure.com/;LiveEndpoint=https://eastus2.livediagnostics.monitor.azure.com/;ApplicationId=878cc89a-8369-4912-bc33-90d275dc6837" \
                AZURE_AI_PROJECT_NAME=ai-project-3rbky3yz3zumq \
                AZURE_CLIENT_ID=ea7bb5ca-bcaa-4cc3-9f05-9233a5c651b7 \
                AZURE_CONTAINER_REGISTRY_NAME=cr3rbky3yz3zumq \
                AZURE_EMBEDDING_NAME=text-embedding-ada-002 \
                AZURE_ENV_NAME=crtwriter \
                AZURE_LOCATION=eastus2 \
                AZURE_OPENAI_4_EVAL_DEPLOYMENT_NAME=gpt-4-evals \
                AZURE_OPENAI_API_VERSION=2024-08-01-preview \
                AZURE_OPENAI_DEPLOYMENT_NAME=gpt-4 \
                AZURE_OPENAI_ENDPOINT=https://aoai-3rbky3yz3zumq.openai.azure.com/ \
                AZURE_OPENAI_NAME=aoai-3rbky3yz3zumq \
                AZURE_RESOURCE_GROUP=rg-crtwriter \
                AZURE_SEARCH_ENDPOINT=https://srch-3rbky3yz3zumq.search.windows.net/ \
                AZURE_SEARCH_NAME=srch-3rbky3yz3zumq \
                AZURE_SUBSCRIPTION_ID=b6e08f96-9a62-46d0-b276-8dc80e6bc02a \
                AZURE_TENANT_ID=16b3c013-d300-468d-ac64-7eda0820b6d3 \
                BING_SEARCH_ENDPOINT=https://api.bing.microsoft.com/ \
                WEB_SERVICE_ACA_NAME=agent-web \
                WEB_SERVICE_ACA_URI=https://agent-web.victoriousbush-684c2a61.eastus2.azurecontainerapps.io
            
            # Assign managed identity to existing container app
            echo "🔑 Assigning managed identity to existing container app..."
            az containerapp identity assign \
              --name ${{ env.API_IMAGE_NAME }} \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --user-assigned "$MANAGED_IDENTITY_ID"
          else
            echo "🆕 Creating new API container app..."
            az containerapp create \
              --name ${{ env.API_IMAGE_NAME }} \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --environment ${{ env.CONTAINER_APPS_ENVIRONMENT }} \
              --image ${{ steps.vars.outputs.api_image_tag }} \
              --target-port 8000 \
              --ingress external \
              --min-replicas 1 \
              --max-replicas 10 \
              --cpu 0.5 \
              --memory 1Gi \
              --revision-suffix "r${{ steps.vars.outputs.build_number }}" \
              --registry-server ${{ env.REGISTRY_URL }} \
              --registry-username "${ACR_USERNAME}" \
              --registry-password "${ACR_PASSWORD}" \
              --env-vars \
                ENVIRONMENT=production \
                BUILD_NUMBER=${{ steps.vars.outputs.build_number }} \
                GIT_SHA=${{ steps.vars.outputs.short_sha }} \
                PORT=8000 \
                PYTHONUNBUFFERED=1 \
                API_SERVICE_ACA_NAME=agent-api \
                APPINSIGHTS_CONNECTIONSTRING="InstrumentationKey=a941babe-3b75-463e-ae64-adbb4a268a54;IngestionEndpoint=https://eastus2-3.in.applicationinsights.azure.com/;LiveEndpoint=https://eastus2.livediagnostics.monitor.azure.com/;ApplicationId=878cc89a-8369-4912-bc33-90d275dc6837" \
                AZURE_AI_PROJECT_NAME=ai-project-3rbky3yz3zumq \
                AZURE_CLIENT_ID=ea7bb5ca-bcaa-4cc3-9f05-9233a5c651b7 \
                AZURE_CONTAINER_REGISTRY_NAME=cr3rbky3yz3zumq \
                AZURE_EMBEDDING_NAME=text-embedding-ada-002 \
                AZURE_ENV_NAME=crtwriter \
                AZURE_LOCATION=eastus2 \
                AZURE_OPENAI_4_EVAL_DEPLOYMENT_NAME=gpt-4-evals \
                AZURE_OPENAI_API_VERSION=2024-08-01-preview \
                AZURE_OPENAI_DEPLOYMENT_NAME=gpt-4 \
                AZURE_OPENAI_ENDPOINT=https://aoai-3rbky3yz3zumq.openai.azure.com/ \
                AZURE_OPENAI_NAME=aoai-3rbky3yz3zumq \
                AZURE_RESOURCE_GROUP=rg-crtwriter \
                AZURE_SEARCH_ENDPOINT=https://srch-3rbky3yz3zumq.search.windows.net/ \
                AZURE_SEARCH_NAME=srch-3rbky3yz3zumq \
                AZURE_SUBSCRIPTION_ID=b6e08f96-9a62-46d0-b276-8dc80e6bc02a \
                AZURE_TENANT_ID=16b3c013-d300-468d-ac64-7eda0820b6d3 \
                BING_SEARCH_ENDPOINT=https://api.bing.microsoft.com/ \
                WEB_SERVICE_ACA_NAME=agent-web \
                WEB_SERVICE_ACA_URI=https://agent-web.victoriousbush-684c2a61.eastus2.azurecontainerapps.io
            
            # Assign managed identity to newly created container app
            echo "🔑 Assigning managed identity to newly created container app..."
            az containerapp identity assign \
              --name ${{ env.API_IMAGE_NAME }} \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --user-assigned "$MANAGED_IDENTITY_ID"
          fi
          
          echo "✅ Managed identity assigned to Container App successfully!"
      - name: Deploy Web to Azure Container Apps
        run: |
          # Get ACR admin credentials
          ACR_USERNAME=$(az acr credential show --name ${{ env.AZURE_CONTAINER_REGISTRY }} --query "username" -o tsv)
          ACR_PASSWORD=$(az acr credential show --name ${{ env.AZURE_CONTAINER_REGISTRY }} --query "passwords[0].value" -o tsv)
          
          echo "🔑 Retrieved ACR credentials for registry: ${{ env.REGISTRY_URL }}"
          echo "🔑 ACR Username: ${ACR_USERNAME}"
          
          # Check if the container app exists
          if az containerapp show --name ${{ env.WEB_IMAGE_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} &>/dev/null; then
            echo "✅ Updating existing Web container app..."
            az containerapp update \
              --name ${{ env.WEB_IMAGE_NAME }} \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --image ${{ steps.vars.outputs.web_image_tag }} \
              --revision-suffix "r${{ steps.vars.outputs.build_number }}" \
              --set-env-vars \
                ENVIRONMENT=production \
                BUILD_NUMBER=${{ steps.vars.outputs.build_number }} \
                GIT_SHA=${{ steps.vars.outputs.short_sha }} \
                API_SERVICE_ACA_NAME=agent-api \
                WEB_SERVICE_ACA_NAME=agent-web
          else
            echo "🆕 Creating new Web container app..."
            az containerapp create \
              --name ${{ env.WEB_IMAGE_NAME }} \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --environment ${{ env.CONTAINER_APPS_ENVIRONMENT }} \
              --image ${{ steps.vars.outputs.web_image_tag }} \
              --target-port 80 \
              --ingress external \
              --min-replicas 1 \
              --max-replicas 5 \
              --cpu 0.5 \
              --memory 1Gi \
              --revision-suffix "r${{ steps.vars.outputs.build_number }}" \
              --registry-server ${{ env.REGISTRY_URL }} \
              --registry-username "${ACR_USERNAME}" \
              --registry-password "${ACR_PASSWORD}" \
              --env-vars \
                ENVIRONMENT=production \
                BUILD_NUMBER=${{ steps.vars.outputs.build_number }} \
                GIT_SHA=${{ steps.vars.outputs.short_sha }} \
                API_SERVICE_ACA_NAME=agent-api \
                WEB_SERVICE_ACA_NAME=agent-web
          fi
      - name: Get deployment URLs and create summary
        id: deployment
        run: |
          # Wait for deployments to stabilize
          echo "⏳ Waiting for deployments to stabilize..."
          sleep 30
          
          # Get Container App URLs
          API_URL=$(az containerapp show \
            --name ${{ env.API_IMAGE_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --query "properties.configuration.ingress.fqdn" \
            --output tsv)
          
          WEB_URL=$(az containerapp show \
            --name ${{ env.WEB_IMAGE_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --query "properties.configuration.ingress.fqdn" \
            --output tsv)
          
          # Set outputs
          echo "api_url=https://${API_URL}" >> $GITHUB_OUTPUT
          echo "web_url=https://${WEB_URL}" >> $GITHUB_OUTPUT
          
          echo "🎉 Deployment completed successfully!"
          echo "🌐 API URL: https://${API_URL}"
          echo "🌐 Web URL: https://${WEB_URL}"
          
          # Create deployment summary
          cat >> $GITHUB_STEP_SUMMARY << EOF
          ## 🚀 Azure Container Apps Deployment Summary
          
          ### ✅ Successfully Deployed Applications
          
          | Application | URL | Image Tag |
          |-------------|-----|-----------|
          | **API** | [https://${API_URL}](https://${API_URL}) | \`${{ steps.vars.outputs.build_number }}\` |
          | **Web** | [https://${WEB_URL}](https://${WEB_URL}) | \`${{ steps.vars.outputs.build_number }}\` |
          
          ### 📦 Container Images
          - **API Image**: \`${{ steps.vars.outputs.api_image_tag }}\`
          - **Web Image**: \`${{ steps.vars.outputs.web_image_tag }}\`
          
          ### 🔧 Build Information
          - **Build Number**: ${{ steps.vars.outputs.build_number }}
          - **Git SHA**: \`${{ steps.vars.outputs.short_sha }}\`
          - **Branch**: \`${{ steps.vars.outputs.branch_name }}\`
          - **Environment**: \`${{ env.CONTAINER_APPS_ENVIRONMENT }}\`
          - **Resource Group**: \`${{ env.RESOURCE_GROUP }}\`
          
          ### 🌍 Environment Variables Set for API
          - **Azure OpenAI**: \`aoai-3rbky3yz3zumq\`
          - **Azure Search**: \`srch-3rbky3yz3zumq\`
          - **Application Insights**: Configured
          - **Azure AI Project**: \`ai-project-3rbky3yz3zumq\`
          - **Bing Search**: Configured
          EOF

      - name: Azure logout
        if: always()
        run: |
          az logout || true
          echo "🔐 Logged out from Azure CLI"