name: Build and Deploy to Azure Container Apps

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/api/**'
      - 'src/web/**'
      - '.github/workflows/depworkflow.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/api/**'
      - 'src/web/**'
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  # Azure Container Registry details
  AZURE_CONTAINER_REGISTRY: cr3rbky3yz3zumq
  REGISTRY_URL: cr3rbky3yz3zumq.azurecr.io
  
  # Container App Environment
  CONTAINER_APPS_ENVIRONMENT: agent-ca-env
  RESOURCE_GROUP: rg-crtwriter
  
  # Application images
  API_IMAGE_NAME: agent-api2
  WEB_IMAGE_NAME: agent-web2

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Azure
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Log in to Azure Container Registry
      run: |
        az acr login --name ${{ env.AZURE_CONTAINER_REGISTRY }}

    - name: Get build number and create tags
      id: tags
      run: |
        # Use GitHub run number for versioning
        BUILD_NUMBER=${{ github.run_number }}
        SHORT_SHA=${GITHUB_SHA::8}
        
        # API image tags
        API_IMAGE_TAG="${{ env.REGISTRY_URL }}/${{ env.API_IMAGE_NAME }}:${BUILD_NUMBER}"
        API_IMAGE_TAG_LATEST="${{ env.REGISTRY_URL }}/${{ env.API_IMAGE_NAME }}:latest"
        API_IMAGE_TAG_SHA="${{ env.REGISTRY_URL }}/${{ env.API_IMAGE_NAME }}:${SHORT_SHA}"
        
        # Web image tags
        WEB_IMAGE_TAG="${{ env.REGISTRY_URL }}/${{ env.WEB_IMAGE_NAME }}:${BUILD_NUMBER}"
        WEB_IMAGE_TAG_LATEST="${{ env.REGISTRY_URL }}/${{ env.WEB_IMAGE_NAME }}:latest"
        WEB_IMAGE_TAG_SHA="${{ env.REGISTRY_URL }}/${{ env.WEB_IMAGE_NAME }}:${SHORT_SHA}"
        
        echo "api_image_tag=${API_IMAGE_TAG}" >> $GITHUB_OUTPUT
        echo "api_image_tag_latest=${API_IMAGE_TAG_LATEST}" >> $GITHUB_OUTPUT
        echo "api_image_tag_sha=${API_IMAGE_TAG_SHA}" >> $GITHUB_OUTPUT
        echo "web_image_tag=${WEB_IMAGE_TAG}" >> $GITHUB_OUTPUT
        echo "web_image_tag_latest=${WEB_IMAGE_TAG_LATEST}" >> $GITHUB_OUTPUT
        echo "web_image_tag_sha=${WEB_IMAGE_TAG_SHA}" >> $GITHUB_OUTPUT
        echo "build_number=${BUILD_NUMBER}" >> $GITHUB_OUTPUT
        echo "short_sha=${SHORT_SHA}" >> $GITHUB_OUTPUT

    - name: Build and push API Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./src/api
        file: ./src/api/Dockerfile
        push: true
        tags: |
          ${{ steps.tags.outputs.api_image_tag }}
          ${{ steps.tags.outputs.api_image_tag_latest }}
          ${{ steps.tags.outputs.api_image_tag_sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

    - name: Build and push Web Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./src/web
        file: ./src/web/Dockerfile
        push: true
        tags: |
          ${{ steps.tags.outputs.web_image_tag }}
          ${{ steps.tags.outputs.web_image_tag_latest }}
          ${{ steps.tags.outputs.web_image_tag_sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

    - name: Deploy API to Azure Container Apps
      run: |
        # Check if the container app exists
        if az containerapp show --name ${{ env.API_IMAGE_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} &>/dev/null; then
          echo "Updating existing API container app..."
          az containerapp update \
            --name ${{ env.API_IMAGE_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --image ${{ steps.tags.outputs.api_image_tag }} \
            --revision-suffix "r${{ steps.tags.outputs.build_number }}"
        else
          echo "Creating new API container app..."
          az containerapp create \
            --name ${{ env.API_IMAGE_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --environment ${{ env.CONTAINER_APPS_ENVIRONMENT }} \
            --image ${{ steps.tags.outputs.api_image_tag }} \
            --target-port 80 \
            --ingress external \
            --min-replicas 1 \
            --max-replicas 10 \
            --cpu 0.5 \
            --memory 1Gi \
            --revision-suffix "r${{ steps.tags.outputs.build_number }}" \
            --registry-server ${{ env.REGISTRY_URL }} \
            --registry-identity system
        fi

    - name: Deploy Web to Azure Container Apps
      run: |
        # Check if the container app exists
        if az containerapp show --name ${{ env.WEB_IMAGE_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} &>/dev/null; then
          echo "Updating existing Web container app..."
          az containerapp update \
            --name ${{ env.WEB_IMAGE_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --image ${{ steps.tags.outputs.web_image_tag }} \
            --revision-suffix "r${{ steps.tags.outputs.build_number }}"
        else
          echo "Creating new Web container app..."
          az containerapp create \
            --name ${{ env.WEB_IMAGE_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --environment ${{ env.CONTAINER_APPS_ENVIRONMENT }} \
            --image ${{ steps.tags.outputs.web_image_tag }} \
            --target-port 80 \
            --ingress external \
            --min-replicas 1 \
            --max-replicas 5 \
            --cpu 0.25 \
            --memory 0.5Gi \
            --revision-suffix "r${{ steps.tags.outputs.build_number }}" \
            --registry-server ${{ env.REGISTRY_URL }} \
            --registry-identity system
        fi

    - name: Get deployment URLs
      id: urls
      run: |
        API_URL=$(az containerapp show --name ${{ env.API_IMAGE_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query "properties.configuration.ingress.fqdn" -o tsv)
        WEB_URL=$(az containerapp show --name ${{ env.WEB_IMAGE_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query "properties.configuration.ingress.fqdn" -o tsv)
        
        echo "api_url=https://${API_URL}" >> $GITHUB_OUTPUT
        echo "web_url=https://${WEB_URL}" >> $GITHUB_OUTPUT
        
        echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "### üöÄ Successfully deployed to Azure Container Apps" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Application | URL | Image Tag |" >> $GITHUB_STEP_SUMMARY
        echo "|-------------|-----|-----------|" >> $GITHUB_STEP_SUMMARY
        echo "| API | https://${API_URL} | ${{ steps.tags.outputs.build_number }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Web | https://${WEB_URL} | ${{ steps.tags.outputs.build_number }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üì¶ Container Images" >> $GITHUB_STEP_SUMMARY
        echo "- **API**: \`${{ steps.tags.outputs.api_image_tag }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Web**: \`${{ steps.tags.outputs.web_image_tag }}\`" >> $GITHUB_STEP_SUMMARY

    - name: Run health checks
      run: |
        echo "Running health checks..."
        
        # Wait for deployments to be ready
        sleep 30
        
        # Health check for API
        API_URL="${{ steps.urls.outputs.api_url }}"
        echo "Checking API health at: $API_URL"
        
        for i in {1..5}; do
          if curl -f -s "$API_URL/health" || curl -f -s "$API_URL/" || curl -f -s "$API_URL/docs"; then
            echo "‚úÖ API is healthy"
            break
          else
            echo "‚è≥ API not ready yet, attempt $i/5"
            sleep 10
          fi
        done
        
        # Health check for Web
        WEB_URL="${{ steps.urls.outputs.web_url }}"
        echo "Checking Web health at: $WEB_URL"
        
        for i in {1..5}; do
          if curl -f -s "$WEB_URL" > /dev/null; then
            echo "‚úÖ Web application is healthy"
            break
          else
            echo "‚è≥ Web application not ready yet, attempt $i/5"
            sleep 10
          fi
        done

    - name: Logout from Azure
      if: always()
      run: |
        az logout
