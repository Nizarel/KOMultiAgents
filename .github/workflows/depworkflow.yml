name: Azure Container Apps Deploy

on:
  push:
    branches: [ master, develop ]
    paths:
      - 'src/api/**'
      - 'src/web/**'
      - '.github/workflows/depworkflow.yml'
  pull_request:
    branches: [ master ]
    paths:
      - 'src/api/**'
      - 'src/web/**'
  workflow_dispatch:
    
env:
  # Azure Container Registry details
  AZURE_CONTAINER_REGISTRY: cr3rbky3yz3zumq
  REGISTRY_URL: cr3rbky3yz3zumq.azurecr.io
  
  # Container App Environment
  CONTAINER_APPS_ENVIRONMENT: agent-ca-env
  RESOURCE_GROUP: rg-crtwriter
  
  # User-assigned managed identity for ACR pull
  USER_ASSIGNED_IDENTITY_ID: ec5d4f86-05ed-4797-831b-32fc6392fb4b
  
  API_IMAGE_NAME: agent-api4
  WEB_IMAGE_NAME: agent-web4

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: 'Checkout GitHub Action'
        uses: actions/checkout@v4

      - name: Set up variables
        id: vars
        run: |
          BUILD_NUMBER=${{ github.run_number }}
          SHORT_SHA=${GITHUB_SHA::8}
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          
          # Set image tags
          API_IMAGE_TAG="${{ env.REGISTRY_URL }}/${{ env.API_IMAGE_NAME }}:${BUILD_NUMBER}"
          WEB_IMAGE_TAG="${{ env.REGISTRY_URL }}/${{ env.WEB_IMAGE_NAME }}:${BUILD_NUMBER}"
          
          echo "build_number=${BUILD_NUMBER}" >> $GITHUB_OUTPUT
          echo "short_sha=${SHORT_SHA}" >> $GITHUB_OUTPUT
          echo "branch_name=${BRANCH_NAME}" >> $GITHUB_OUTPUT
          echo "api_image_tag=${API_IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "web_image_tag=${WEB_IMAGE_TAG}" >> $GITHUB_OUTPUT
          
          echo "🏷️ Image tags:"
          echo "API: ${API_IMAGE_TAG}"
          echo "Web: ${WEB_IMAGE_TAG}"

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AGENTAPI2_AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AGENTAPI2_AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AGENTAPI2_AZURE_SUBSCRIPTION_ID }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Azure Container Registry
        run: |
          az acr login --name ${{ env.AZURE_CONTAINER_REGISTRY }}

      - name: Build and push API Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./src/api
          file: ./src/api/Dockerfile
          push: true
          tags: ${{ steps.vars.outputs.api_image_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Build and push Web Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./src/web
          file: ./src/web/Dockerfile
          push: true
          tags: ${{ steps.vars.outputs.web_image_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Deploy API to Azure Container Apps
        run: |
          # Get full resource ID of user-assigned identity
          IDENTITY_RESOURCE_ID=$(az identity show --name ${{ env.USER_ASSIGNED_IDENTITY_ID }} --resource-group ${{ env.RESOURCE_GROUP }} --query id -o tsv)
          
          # Check if the container app exists
          if az containerapp show --name ${{ env.API_IMAGE_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} &>/dev/null; then
            echo "✅ Updating existing API container app..."
            # For update, we need to modify the container app properties to include the registry credentials
            az containerapp update \
              --name ${{ env.API_IMAGE_NAME }} \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --image ${{ steps.vars.outputs.api_image_tag }} \
              --user-assigned $IDENTITY_RESOURCE_ID \
              --revision-suffix "r${{ steps.vars.outputs.build_number }}" \
              --set-env-vars \
                ENVIRONMENT=production \
                BUILD_NUMBER=${{ steps.vars.outputs.build_number }} \
                GIT_SHA=${{ steps.vars.outputs.short_sha }}
            
            # Update the registry configuration to use the user-assigned identity
            az containerapp registry set \
              --name ${{ env.API_IMAGE_NAME }} \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --server ${{ env.REGISTRY_URL }} \
              --identity $IDENTITY_RESOURCE_ID
          else
            echo "🆕 Creating new API container app..."
            az containerapp create \
              --name ${{ env.API_IMAGE_NAME }} \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --environment ${{ env.CONTAINER_APPS_ENVIRONMENT }} \
              --image ${{ steps.vars.outputs.api_image_tag }} \
              --target-port 80 \
              --ingress external \
              --min-replicas 1 \
              --max-replicas 10 \
              --cpu 0.5 \
              --memory 1Gi \
              --revision-suffix "r${{ steps.vars.outputs.build_number }}" \
              --registry-server ${{ env.REGISTRY_URL }} \
              --user-assigned $IDENTITY_RESOURCE_ID \
              --registry-identity $IDENTITY_RESOURCE_ID \
              --env-vars \
                ENVIRONMENT=production \
                BUILD_NUMBER=${{ steps.vars.outputs.build_number }} \
                GIT_SHA=${{ steps.vars.outputs.short_sha }}
          fi

      - name: Deploy Web to Azure Container Apps
        run: |
          # Get full resource ID of user-assigned identity
          IDENTITY_RESOURCE_ID=$(az identity show --name ${{ env.USER_ASSIGNED_IDENTITY_ID }} --resource-group ${{ env.RESOURCE_GROUP }} --query id -o tsv)
          
          # Check if the container app exists
          if az containerapp show --name ${{ env.WEB_IMAGE_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} &>/dev/null; then
            echo "✅ Updating existing Web container app..."
            az containerapp update \
              --name ${{ env.WEB_IMAGE_NAME }} \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --image ${{ steps.vars.outputs.web_image_tag }} \
              --user-assigned $IDENTITY_RESOURCE_ID \
              --revision-suffix "r${{ steps.vars.outputs.build_number }}" \
              --set-env-vars \
                ENVIRONMENT=production \
                BUILD_NUMBER=${{ steps.vars.outputs.build_number }} \
                GIT_SHA=${{ steps.vars.outputs.short_sha }}
                
            # Update the registry configuration to use the user-assigned identity
            az containerapp registry set \
              --name ${{ env.WEB_IMAGE_NAME }} \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --server ${{ env.REGISTRY_URL }} \
              --identity $IDENTITY_RESOURCE_ID
          else
            echo "🆕 Creating new Web container app..."
            az containerapp create \
              --name ${{ env.WEB_IMAGE_NAME }} \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --environment ${{ env.CONTAINER_APPS_ENVIRONMENT }} \
              --image ${{ steps.vars.outputs.web_image_tag }} \
              --target-port 80 \
              --ingress external \
              --min-replicas 1 \
              --max-replicas 5 \
              --cpu 0.25 \
              --memory 0.5Gi \
              --revision-suffix "r${{ steps.vars.outputs.build_number }}" \
              --registry-server ${{ env.REGISTRY_URL }} \
              --user-assigned $IDENTITY_RESOURCE_ID \
              --registry-identity $IDENTITY_RESOURCE_ID \
              --env-vars \
                ENVIRONMENT=production \
                BUILD_NUMBER=${{ steps.vars.outputs.build_number }} \
                GIT_SHA=${{ steps.vars.outputs.short_sha }}
          fi

    #   - name: Get deployment URLs and create summary
    #     id: deployment
    #     run: |
    #       # Wait for deployments to stabilize
    #       echo "⏳ Waiting for deployments to stabilize..."
    #       sleep 30
          
    #       # Get Container App URLs
    #       API_URL=$(az containerapp show \
    #         --name ${{ env.API_IMAGE_NAME }} \
    #         --resource-group ${{ env.RESOURCE_GROUP }} \
    #         --query "properties.configuration.ingress.fqdn" \
    #         --output tsv)
          
    #       WEB_URL=$(az containerapp show \
    #         --name ${{ env.WEB_IMAGE_NAME }} \
    #         --resource-group ${{ env.RESOURCE_GROUP }} \
    #         --query "properties.configuration.ingress.fqdn" \
    #         --output tsv)
          
    #       # Set outputs
    #       echo "api_url=https://${API_URL}" >> $GITHUB_OUTPUT
    #       echo "web_url=https://${WEB_URL}" >> $GITHUB_OUTPUT
          
    #       # Create deployment summary
    #       cat >> $GITHUB_STEP_SUMMARY << EOF
    #       ## 🚀 Azure Container Apps Deployment Summary
          
    #       ### ✅ Successfully Deployed Applications
          
    #       | Application | URL | Image Tag |
    #       |-------------|-----|-----------|
    #       | **API** | [https://${API_URL}](https://${API_URL}) | \`${{ steps.vars.outputs.build_number }}\` |
    #       | **Web** | [https://${WEB_URL}](https://${WEB_URL}) | \`${{ steps.vars.outputs.build_number }}\` |
          
    #       ### 📦 Container Images
    #       - **API Image**: \`${{ steps.vars.outputs.api_image_tag }}\`
    #       - **Web Image**: \`${{ steps.vars.outputs.web_image_tag }}\`
          
    #       ### 🔧 Build Information
    #       - **Build Number**: ${{ steps.vars.outputs.build_number }}
    #       - **Git SHA**: \`${{ steps.vars.outputs.short_sha }}\`
    #       - **Branch**: \`${{ steps.vars.outputs.branch_name }}\`
    #       - **Environment**: \`${{ env.CONTAINER_APPS_ENVIRONMENT }}\`
    #       - **Resource Group**: \`${{ env.RESOURCE_GROUP }}\`
    #       EOF

    #   - name: Azure logout
    #     if: always()
    #     run: |
    #       az logout || true
    #       echo "🔐 Logged out from Azure CLI"