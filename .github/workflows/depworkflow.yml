# name: Azure Container Apps Deploy

# on:
#   push:
#     branches: [ main, develop ]
#     paths:
#       - 'src/api/**'
#       - 'src/web/**'
#       - '.github/workflows/depworkflow-fixed.yml'
#   pull_request:
#     branches: [ main ]
#     paths:
#       - 'src/api/**'
#       - 'src/web/**'
#   workflow_dispatch:
    
# permissions:
#   id-token: write
#   contents: read

# env:
#   # Azure Container Registry details
#   AZURE_CONTAINER_REGISTRY: cr3rbky3yz3zumq
#   REGISTRY_URL: cr3rbky3yz3zumq.azurecr.io
  
#   # Container App Environment
#   CONTAINER_APPS_ENVIRONMENT: agent-ca-env
#   RESOURCE_GROUP: rg-crtwriter
  
#   API_IMAGE_NAME: agent-api2
#   WEB_IMAGE_NAME: agent-web2

# jobs:
#   build-and-deploy:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Set up variables
#         id: vars
#         run: |
#           BUILD_NUMBER=${{ github.run_number }}
#           SHORT_SHA=${GITHUB_SHA::8}
#           echo "build_number=${BUILD_NUMBER}" >> $GITHUB_OUTPUT
#           echo "short_sha=${SHORT_SHA}" >> $GITHUB_OUTPUT
#           echo "api_image_tag=${{ env.REGISTRY_URL }}/${{ env.API_IMAGE_NAME }}:${BUILD_NUMBER}" >> $GITHUB_OUTPUT
#           echo "web_image_tag=${{ env.REGISTRY_URL }}/${{ env.WEB_IMAGE_NAME }}:${BUILD_NUMBER}" >> $GITHUB_OUTPUT

#       - name: Azure login
#         uses: azure/login@v2
#         with:
#           client-id: ${{ secrets.AZURE_CLIENT_ID }}
#           tenant-id: ${{ secrets.AZURE_TENANT_ID }}
#           subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

#       - name: Build and deploy API Container App
#         uses: azure/container-apps-deploy-action@v2
#         with:
#           appSourcePath: ${{ github.workspace }}/src/api
#           acrName: ${{ env.AZURE_CONTAINER_REGISTRY }}
#           containerAppName: ${{ env.API_IMAGE_NAME }}
#           resourceGroup: ${{ env.RESOURCE_GROUP }}
#           containerAppEnvironment: ${{ env.CONTAINER_APPS_ENVIRONMENT }}
#           imageToBuild: ${{ steps.vars.outputs.api_image_tag }}
#           dockerfilePath: ${{ github.workspace }}/src/api/Dockerfile
#           targetPort: 80
#           ingress: external

#       - name: Build and deploy Web Container App
#         uses: azure/container-apps-deploy-action@v2
#         with:
#           appSourcePath: ${{ github.workspace }}/src/web
#           acrName: ${{ env.AZURE_CONTAINER_REGISTRY }}
#           containerAppName: ${{ env.WEB_IMAGE_NAME }}
#           resourceGroup: ${{ env.RESOURCE_GROUP }}
#           containerAppEnvironment: ${{ env.CONTAINER_APPS_ENVIRONMENT }}
#           imageToBuild: ${{ steps.vars.outputs.web_image_tag }}
#           dockerfilePath: ${{ github.workspace }}/src/web/Dockerfile
#           targetPort: 80
#           ingress: external

#       - name: Get deployment URLs
#         id: urls
#         run: |
#           API_URL=$(az containerapp show --name ${{ env.API_IMAGE_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query "properties.configuration.ingress.fqdn" -o tsv)
#           WEB_URL=$(az containerapp show --name ${{ env.WEB_IMAGE_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query "properties.configuration.ingress.fqdn" -o tsv)
          
#           echo "## üöÄ Deployment Summary" >> $GITHUB_STEP_SUMMARY
#           echo "| Application | URL |" >> $GITHUB_STEP_SUMMARY
#           echo "|-------------|-----|" >> $GITHUB_STEP_SUMMARY
#           echo "| API | https://${API_URL} |" >> $GITHUB_STEP_SUMMARY
#           echo "| Web | https://${WEB_URL} |" >> $GITHUB_STEP_SUMMARY

#       - name: Health checks
#         run: |
#           echo "Running health checks..."
#           sleep 30
          
#           # API Health check
#           API_URL=$(az containerapp show --name ${{ env.API_IMAGE_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query "properties.configuration.ingress.fqdn" -o tsv)
#           for i in {1..5}; do
#             if curl -f -s "https://${API_URL}/health" || curl -f -s "https://${API_URL}/"; then
#               echo "‚úÖ API is healthy"
#               break
#             else
#               echo "‚è≥ API not ready yet, attempt $i/5"
#               sleep 10
#             fi
#           done
          
#           # Web Health check
#           WEB_URL=$(az containerapp show --name ${{ env.WEB_IMAGE_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query "properties.configuration.ingress.fqdn" -o tsv)
#           for i in {1..5}; do
#             if curl -f -s "https://${WEB_URL}" > /dev/null; then
#               echo "‚úÖ Web application is healthy"
#               break
#             else
#               echo "‚è≥ Web application not ready yet, attempt $i/5"
#               sleep 10
#             fi
#           done

#       - name: Azure logout
#         if: always()
#         run: |
#           az logout