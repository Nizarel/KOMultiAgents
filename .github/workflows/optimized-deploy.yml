# name: Optimized Azure Container Apps Deploy

# on:
#   push:
#     branches: [ master, develop ]
#     paths:
#       - 'src/api/**'
#       - 'src/web/**'
#       - '.github/workflows/optimized-deploy.yml'
#   pull_request:
#     branches: [ master ]
#     paths:
#       - 'src/api/**'
#       - 'src/web/**'
#   workflow_dispatch:
    
# env:
#   # Azure Container Registry details
#   AZURE_CONTAINER_REGISTRY: cr3rbky3yz3zumq
#   REGISTRY_URL: cr3rbky3yz3zumq.azurecr.io
  
#   # Container App Environment
#   CONTAINER_APPS_ENVIRONMENT: agent-ca-env
#   RESOURCE_GROUP: rg-crtwriter
  
#   API_IMAGE_NAME: agent-api80
#   WEB_IMAGE_NAME: agent-web80

# jobs:
#   # Preparation job - runs first to set up variables and authenticate
#   prepare:
#     runs-on: ubuntu-latest
#     permissions:
#       id-token: write
#       contents: read
#     outputs:
#       build_number: ${{ steps.vars.outputs.build_number }}
#       short_sha: ${{ steps.vars.outputs.short_sha }}
#       branch_name: ${{ steps.vars.outputs.branch_name }}
#       api_image_tag: ${{ steps.vars.outputs.api_image_tag }}
#       web_image_tag: ${{ steps.vars.outputs.web_image_tag }}
#       acr_username: ${{ steps.acr.outputs.username }}
#       acr_password: ${{ steps.acr.outputs.password }}
    
#     steps:
#       - name: 'Checkout GitHub Action'
#         uses: actions/checkout@v4
#         with:
#           # Optimize checkout - only get the current commit
#           fetch-depth: 1

#       - name: Set up variables
#         id: vars
#         run: |
#           BUILD_NUMBER=${{ github.run_number }}
#           SHORT_SHA=${GITHUB_SHA::8}
#           BRANCH_NAME=${GITHUB_REF#refs/heads/}
          
#           # Set image tags
#           API_IMAGE_TAG="${{ env.REGISTRY_URL }}/${{ env.API_IMAGE_NAME }}:${BUILD_NUMBER}"
#           WEB_IMAGE_TAG="${{ env.REGISTRY_URL }}/${{ env.WEB_IMAGE_NAME }}:${BUILD_NUMBER}"
          
#           echo "build_number=${BUILD_NUMBER}" >> $GITHUB_OUTPUT
#           echo "short_sha=${SHORT_SHA}" >> $GITHUB_OUTPUT
#           echo "branch_name=${BRANCH_NAME}" >> $GITHUB_OUTPUT
#           echo "api_image_tag=${API_IMAGE_TAG}" >> $GITHUB_OUTPUT
#           echo "web_image_tag=${WEB_IMAGE_TAG}" >> $GITHUB_OUTPUT
          
#           echo "🏷️ Image tags:"
#           echo "API: ${API_IMAGE_TAG}"
#           echo "Web: ${WEB_IMAGE_TAG}"

#       - name: Azure Login
#         uses: azure/login@v1
#         with:
#           client-id: ${{ secrets.AGENTAPI2_AZURE_CLIENT_ID }}
#           tenant-id: ${{ secrets.AGENTAPI2_AZURE_TENANT_ID }}
#           subscription-id: ${{ secrets.AGENTAPI2_AZURE_SUBSCRIPTION_ID }}

#       - name: Get ACR credentials
#         id: acr
#         run: |
#           # Enable admin user for ACR (if not already enabled)
#           az acr update --name ${{ env.AZURE_CONTAINER_REGISTRY }} --admin-enabled true
          
#           # Get credentials
#           ACR_USERNAME=$(az acr credential show --name ${{ env.AZURE_CONTAINER_REGISTRY }} --query "username" -o tsv)
#           ACR_PASSWORD=$(az acr credential show --name ${{ env.AZURE_CONTAINER_REGISTRY }} --query "passwords[0].value" -o tsv)
          
#           echo "username=${ACR_USERNAME}" >> $GITHUB_OUTPUT
#           echo "password=${ACR_PASSWORD}" >> $GITHUB_OUTPUT
#           echo "✅ ACR credentials retrieved"

#       - name: Azure logout
#         if: always()
#         run: |
#           az logout || true

#   # Build jobs run in parallel after preparation
#   build-api:
#     needs: prepare
#     runs-on: ubuntu-latest
#     steps:
#       - name: 'Checkout GitHub Action'
#         uses: actions/checkout@v4
#         with:
#           fetch-depth: 1
#           # Sparse checkout - only API directory
#           sparse-checkout: |
#             src/api

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3

#       - name: Log in to Azure Container Registry
#         uses: docker/login-action@v3
#         with:
#           registry: ${{ env.REGISTRY_URL }}
#           username: ${{ needs.prepare.outputs.acr_username }}
#           password: ${{ needs.prepare.outputs.acr_password }}

#       - name: Build and push API Docker image
#         uses: docker/build-push-action@v5
#         with:
#           context: ./src/api
#           file: ./src/api/Dockerfile
#           push: true
#           tags: |
#             ${{ needs.prepare.outputs.api_image_tag }}
#             ${{ env.REGISTRY_URL }}/${{ env.API_IMAGE_NAME }}:latest
#           cache-from: type=gha,scope=api
#           cache-to: type=gha,mode=max,scope=api
#           platforms: linux/amd64
#           # Optimize build with multi-stage build optimization
#           build-args: |
#             BUILDKIT_INLINE_CACHE=1

#   build-web:
#     needs: prepare
#     runs-on: ubuntu-latest
#     steps:
#       - name: 'Checkout GitHub Action'
#         uses: actions/checkout@v4
#         with:
#           fetch-depth: 1
#           # Sparse checkout - only Web directory
#           sparse-checkout: |
#             src/web

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3

#       - name: Log in to Azure Container Registry
#         uses: docker/login-action@v3
#         with:
#           registry: ${{ env.REGISTRY_URL }}
#           username: ${{ needs.prepare.outputs.acr_username }}
#           password: ${{ needs.prepare.outputs.acr_password }}

#       - name: Build and push Web Docker image
#         uses: docker/build-push-action@v5
#         with:
#           context: ./src/web
#           file: ./src/web/Dockerfile
#           push: true
#           tags: |
#             ${{ needs.prepare.outputs.web_image_tag }}
#             ${{ env.REGISTRY_URL }}/${{ env.WEB_IMAGE_NAME }}:latest
#           cache-from: type=gha,scope=web
#           cache-to: type=gha,mode=max,scope=web
#           platforms: linux/amd64
#           # Optimize build with multi-stage build optimization
#           build-args: |
#             BUILDKIT_INLINE_CACHE=1

#   # Deploy API and Web in parallel after builds complete
#   deploy-api:
#     needs: [prepare, build-api]
#     runs-on: ubuntu-latest
#     permissions:
#       id-token: write
#       contents: read
#     outputs:
#       api_url: ${{ steps.deploy.outputs.api_url }}
    
#     steps:
#       - name: Azure Login
#         uses: azure/login@v1
#         with:
#           client-id: ${{ secrets.AGENTAPI2_AZURE_CLIENT_ID }}
#           tenant-id: ${{ secrets.AGENTAPI2_AZURE_TENANT_ID }}
#           subscription-id: ${{ secrets.AGENTAPI2_AZURE_SUBSCRIPTION_ID }}

#       - name: Deploy API to Azure Container Apps
#         id: deploy
#         run: |
#           # Get the managed identity resource ID
#           MANAGED_IDENTITY_ID="/subscriptions/b6e08f96-9a62-46d0-b276-8dc80e6bc02a/resourceGroups/${{ env.RESOURCE_GROUP }}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id-3rbky3yz3zumq"
          
#           echo "🔑 Using managed identity: $MANAGED_IDENTITY_ID"
#           echo "🚀 Deploying API with image: ${{ needs.prepare.outputs.api_image_tag }}"
          
#           # Check if the container app exists
#           if az containerapp show --name ${{ env.API_IMAGE_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} &>/dev/null; then
#             echo "✅ Updating existing API container app..."
#             az containerapp update \
#               --name ${{ env.API_IMAGE_NAME }} \
#               --resource-group ${{ env.RESOURCE_GROUP }} \
#               --image ${{ needs.prepare.outputs.api_image_tag }} \
#               --revision-suffix "r${{ needs.prepare.outputs.build_number }}" \
#               --set-env-vars \
#                 ENVIRONMENT=production \
#                 BUILD_NUMBER=${{ needs.prepare.outputs.build_number }} \
#                 GIT_SHA=${{ needs.prepare.outputs.short_sha }} \
#                 PORT=8000 \
#                 PYTHONUNBUFFERED=1 \
#                 API_SERVICE_ACA_NAME=agent-api \
#                 APPINSIGHTS_CONNECTIONSTRING="InstrumentationKey=a941babe-3b75-463e-ae64-adbb4a268a54;IngestionEndpoint=https://eastus2-3.in.applicationinsights.azure.com/;LiveEndpoint=https://eastus2.livediagnostics.monitor.azure.com/;ApplicationId=878cc89a-8369-4912-bc33-90d275dc6837" \
#                 AZURE_AI_PROJECT_NAME=ai-project-3rbky3yz3zumq \
#                 AZURE_CLIENT_ID=ea7bb5ca-bcaa-4cc3-9f05-9233a5c651b7 \
#                 AZURE_CONTAINER_REGISTRY_NAME=cr3rbky3yz3zumq \
#                 AZURE_EMBEDDING_NAME=text-embedding-ada-002 \
#                 AZURE_ENV_NAME=crtwriter \
#                 AZURE_LOCATION=eastus2 \
#                 AZURE_OPENAI_4_EVAL_DEPLOYMENT_NAME=gpt-4-evals \
#                 AZURE_OPENAI_API_VERSION=2024-08-01-preview \
#                 AZURE_OPENAI_DEPLOYMENT_NAME=gpt-4 \
#                 AZURE_OPENAI_ENDPOINT=https://aoai-3rbky3yz3zumq.openai.azure.com/ \
#                 AZURE_OPENAI_NAME=aoai-3rbky3yz3zumq \
#                 AZURE_RESOURCE_GROUP=rg-crtwriter \
#                 AZURE_SEARCH_ENDPOINT=https://srch-3rbky3yz3zumq.search.windows.net/ \
#                 AZURE_SEARCH_NAME=srch-3rbky3yz3zumq \
#                 AZURE_SUBSCRIPTION_ID=b6e08f96-9a62-46d0-b276-8dc80e6bc02a \
#                 AZURE_TENANT_ID=16b3c013-d300-468d-ac64-7eda0820b6d3 \
#                 BING_SEARCH_ENDPOINT=https://api.bing.microsoft.com/ \
#                 WEB_SERVICE_ACA_NAME=agent-web \
#                 WEB_SERVICE_ACA_URI=https://agent-web.victoriousbush-684c2a61.eastus2.azurecontainerapps.io \
#                 MSI_ENDPOINT=http://169.254.169.254/metadata/identity/oauth2/token \
#                 IDENTITY_ENDPOINT=http://169.254.169.254/metadata/identity/oauth2/token \
#                 AZURE_USE_MANAGED_IDENTITY=true
            
#             # Assign managed identity to existing container app
#             echo "🔑 Assigning managed identity to existing container app..."
#             az containerapp identity assign \
#               --name ${{ env.API_IMAGE_NAME }} \
#               --resource-group ${{ env.RESOURCE_GROUP }} \
#               --user-assigned "$MANAGED_IDENTITY_ID"
#           else
#             echo "🆕 Creating new API container app..."
#             az containerapp create \
#               --name ${{ env.API_IMAGE_NAME }} \
#               --resource-group ${{ env.RESOURCE_GROUP }} \
#               --environment ${{ env.CONTAINER_APPS_ENVIRONMENT }} \
#               --image ${{ needs.prepare.outputs.api_image_tag }} \
#               --target-port 8000 \
#               --ingress external \
#               --min-replicas 1 \
#               --max-replicas 10 \
#               --cpu 0.5 \
#               --memory 1Gi \
#               --revision-suffix "r${{ needs.prepare.outputs.build_number }}" \
#               --registry-server ${{ env.REGISTRY_URL }} \
#               --registry-username "${{ needs.prepare.outputs.acr_username }}" \
#               --registry-password "${{ needs.prepare.outputs.acr_password }}" \
#               --env-vars \
#                 ENVIRONMENT=production \
#                 BUILD_NUMBER=${{ needs.prepare.outputs.build_number }} \
#                 GIT_SHA=${{ needs.prepare.outputs.short_sha }} \
#                 PORT=8000 \
#                 PYTHONUNBUFFERED=1 \
#                 API_SERVICE_ACA_NAME=agent-api \
#                 APPINSIGHTS_CONNECTIONSTRING="InstrumentationKey=a941babe-3b75-463e-ae64-adbb4a268a54;IngestionEndpoint=https://eastus2-3.in.applicationinsights.azure.com/;LiveEndpoint=https://eastus2.livediagnostics.monitor.azure.com/;ApplicationId=878cc89a-8369-4912-bc33-90d275dc6837" \
#                 AZURE_AI_PROJECT_NAME=ai-project-3rbky3yz3zumq \
#                 AZURE_CLIENT_ID=ea7bb5ca-bcaa-4cc3-9f05-9233a5c651b7 \
#                 AZURE_CONTAINER_REGISTRY_NAME=cr3rbky3yz3zumq \
#                 AZURE_EMBEDDING_NAME=text-embedding-ada-002 \
#                 AZURE_ENV_NAME=crtwriter \
#                 AZURE_LOCATION=eastus2 \
#                 AZURE_OPENAI_4_EVAL_DEPLOYMENT_NAME=gpt-4-evals \
#                 AZURE_OPENAI_API_VERSION=2024-08-01-preview \
#                 AZURE_OPENAI_DEPLOYMENT_NAME=gpt-4 \
#                 AZURE_OPENAI_ENDPOINT=https://aoai-3rbky3yz3zumq.openai.azure.com/ \
#                 AZURE_OPENAI_NAME=aoai-3rbky3yz3zumq \
#                 AZURE_RESOURCE_GROUP=rg-crtwriter \
#                 AZURE_SEARCH_ENDPOINT=https://srch-3rbky3yz3zumq.search.windows.net/ \
#                 AZURE_SEARCH_NAME=srch-3rbky3yz3zumq \
#                 AZURE_SUBSCRIPTION_ID=b6e08f96-9a62-46d0-b276-8dc80e6bc02a \
#                 AZURE_TENANT_ID=16b3c013-d300-468d-ac64-7eda0820b6d3 \
#                 BING_SEARCH_ENDPOINT=https://api.bing.microsoft.com/ \
#                 WEB_SERVICE_ACA_NAME=agent-web \
#                 WEB_SERVICE_ACA_URI=https://agent-web.victoriousbush-684c2a61.eastus2.azurecontainerapps.io \
#                 MSI_ENDPOINT=http://169.254.169.254/metadata/identity/oauth2/token \
#                 IDENTITY_ENDPOINT=http://169.254.169.254/metadata/identity/oauth2/token \
#                 AZURE_USE_MANAGED_IDENTITY=true
            
#             # Assign managed identity to newly created container app
#             echo "🔑 Assigning managed identity to newly created container app..."
#             az containerapp identity assign \
#               --name ${{ env.API_IMAGE_NAME }} \
#               --resource-group ${{ env.RESOURCE_GROUP }} \
#               --user-assigned "$MANAGED_IDENTITY_ID"
#           fi
          
#           echo "✅ Managed identity assigned to Container App successfully!"
          
#           # Get API URL
#           API_URL=$(az containerapp show \
#             --name ${{ env.API_IMAGE_NAME }} \
#             --resource-group ${{ env.RESOURCE_GROUP }} \
#             --query "properties.configuration.ingress.fqdn" \
#             --output tsv)
          
#           echo "api_url=https://${API_URL}" >> $GITHUB_OUTPUT
#           echo "🌐 API URL: https://${API_URL}"

#       - name: Azure logout
#         if: always()
#         run: |
#           az logout || true

#   deploy-web:
#     needs: [prepare, build-web]
#     runs-on: ubuntu-latest
#     permissions:
#       id-token: write
#       contents: read
#     outputs:
#       web_url: ${{ steps.deploy.outputs.web_url }}
    
#     steps:
#       - name: Azure Login
#         uses: azure/login@v1
#         with:
#           client-id: ${{ secrets.AGENTAPI2_AZURE_CLIENT_ID }}
#           tenant-id: ${{ secrets.AGENTAPI2_AZURE_TENANT_ID }}
#           subscription-id: ${{ secrets.AGENTAPI2_AZURE_SUBSCRIPTION_ID }}

#       - name: Deploy Web to Azure Container Apps
#         id: deploy
#         run: |
#           echo "🚀 Deploying Web with image: ${{ needs.prepare.outputs.web_image_tag }}"
          
#           # Check if the container app exists
#           if az containerapp show --name ${{ env.WEB_IMAGE_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} &>/dev/null; then
#             echo "✅ Updating existing Web container app..."
#             az containerapp update \
#               --name ${{ env.WEB_IMAGE_NAME }} \
#               --resource-group ${{ env.RESOURCE_GROUP }} \
#               --image ${{ needs.prepare.outputs.web_image_tag }} \
#               --revision-suffix "r${{ needs.prepare.outputs.build_number }}" \
#               --set-env-vars \
#                 ENVIRONMENT=production \
#                 BUILD_NUMBER=${{ needs.prepare.outputs.build_number }} \
#                 GIT_SHA=${{ needs.prepare.outputs.short_sha }} \
#                 API_SERVICE_ACA_NAME=agent-api \
#                 WEB_SERVICE_ACA_NAME=agent-web
#           else
#             echo "🆕 Creating new Web container app..."
#             az containerapp create \
#               --name ${{ env.WEB_IMAGE_NAME }} \
#               --resource-group ${{ env.RESOURCE_GROUP }} \
#               --environment ${{ env.CONTAINER_APPS_ENVIRONMENT }} \
#               --image ${{ needs.prepare.outputs.web_image_tag }} \
#               --target-port 80 \
#               --ingress external \
#               --min-replicas 1 \
#               --max-replicas 5 \
#               --cpu 0.5 \
#               --memory 1Gi \
#               --revision-suffix "r${{ needs.prepare.outputs.build_number }}" \
#               --registry-server ${{ env.REGISTRY_URL }} \
#               --registry-username "${{ needs.prepare.outputs.acr_username }}" \
#               --registry-password "${{ needs.prepare.outputs.acr_password }}" \
#               --env-vars \
#                 ENVIRONMENT=production \
#                 BUILD_NUMBER=${{ needs.prepare.outputs.build_number }} \
#                 GIT_SHA=${{ needs.prepare.outputs.short_sha }} \
#                 API_SERVICE_ACA_NAME=agent-api \
#                 WEB_SERVICE_ACA_NAME=agent-web
#           fi
          
#           # Get Web URL
#           WEB_URL=$(az containerapp show \
#             --name ${{ env.WEB_IMAGE_NAME }} \
#             --resource-group ${{ env.RESOURCE_GROUP }} \
#             --query "properties.configuration.ingress.fqdn" \
#             --output tsv)
          
#           echo "web_url=https://${WEB_URL}" >> $GITHUB_OUTPUT
#           echo "🌐 Web URL: https://${WEB_URL}"

#       - name: Azure logout
#         if: always()
#         run: |
#           az logout || true

#   # Summary job runs after all deployments complete
#   deployment-summary:
#     needs: [prepare, deploy-api, deploy-web]
#     runs-on: ubuntu-latest
#     if: always()
    
#     steps:
#       - name: Create deployment summary
#         run: |
#           # Create deployment summary
#           cat >> $GITHUB_STEP_SUMMARY << EOF
#           ## 🚀 Optimized Azure Container Apps Deployment Summary
          
#           ### ✅ Successfully Deployed Applications
          
#           | Application | URL | Image Tag | Status |
#           |-------------|-----|-----------|--------|
#           | **API** | [${{ needs.deploy-api.outputs.api_url }}](${{ needs.deploy-api.outputs.api_url }}) | \`${{ needs.prepare.outputs.build_number }}\` | ${{ needs.deploy-api.result == 'success' && '✅ Success' || '❌ Failed' }} |
#           | **Web** | [${{ needs.deploy-web.outputs.web_url }}](${{ needs.deploy-web.outputs.web_url }}) | \`${{ needs.prepare.outputs.build_number }}\` | ${{ needs.deploy-web.result == 'success' && '✅ Success' || '❌ Failed' }} |
          
#           ### 📦 Container Images
#           - **API Image**: \`${{ needs.prepare.outputs.api_image_tag }}\`
#           - **Web Image**: \`${{ needs.prepare.outputs.web_image_tag }}\`
          
#           ### 🔧 Build Information
#           - **Build Number**: ${{ needs.prepare.outputs.build_number }}
#           - **Git SHA**: \`${{ needs.prepare.outputs.short_sha }}\`
#           - **Branch**: \`${{ needs.prepare.outputs.branch_name }}\`
#           - **Environment**: \`${{ env.CONTAINER_APPS_ENVIRONMENT }}\`
#           - **Resource Group**: \`${{ env.RESOURCE_GROUP }}\`
          
#           ### ⚡ Performance Optimizations Applied
#           - **Parallel Builds**: API and Web built simultaneously
#           - **Parallel Deployments**: API and Web deployed simultaneously  
#           - **Sparse Checkout**: Only relevant directories checked out
#           - **Docker Layer Caching**: GitHub Actions cache used for faster builds
#           - **Optimized Docker Login**: Direct ACR login action used
#           - **Minimal Checkout**: Only current commit fetched
          
#           ### 🌍 Environment Variables Set for API
#           - **Azure OpenAI**: \`aoai-3rbky3yz3zumq\`
#           - **Azure Search**: \`srch-3rbky3yz3zumq\`
#           - **Application Insights**: Configured
#           - **Azure AI Project**: \`ai-project-3rbky3yz3zumq\`
#           - **Bing Search**: Configured
#           - **Managed Identity**: ✅ Enabled with MSI endpoints
#           EOF
          
#           echo "🎉 Optimized deployment completed!"
#           echo "⚡ Expected time savings: 50-70% compared to sequential workflow"

#   # Health check job - optional, runs after deployment
#   health-check:
#     needs: [deploy-api, deploy-web]
#     runs-on: ubuntu-latest
#     if: success()
    
#     steps:
#       - name: Health check APIs
#         run: |
#           echo "🏥 Running health checks..."
          
#           # Wait for services to be ready
#           sleep 30
          
#           # Check API health
#           API_URL="${{ needs.deploy-api.outputs.api_url }}"
#           if curl -f -s --max-time 30 "${API_URL}/health" >/dev/null; then
#             echo "✅ API health check passed"
#           else
#             echo "⚠️  API health check failed or endpoint not available"
#           fi
          
#           # Check Web health  
#           WEB_URL="${{ needs.deploy-web.outputs.web_url }}"
#           if curl -f -s --max-time 30 "${WEB_URL}" >/dev/null; then
#             echo "✅ Web health check passed"
#           else
#             echo "⚠️  Web health check failed or endpoint not available"
#           fi
          
#           echo "🏥 Health checks completed"
