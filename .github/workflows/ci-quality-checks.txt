name: CI Quality Checks

on:
  push:
    branches: [ master, develop, feature/* ]
  pull_request:
    branches: [ master, develop ]
    types: [opened, synchronize, reopened]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Detect changes to optimize CI runs
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      api-changed: ${{ steps.changes.outputs.api }}
      web-changed: ${{ steps.changes.outputs.web }}
      docs-changed: ${{ steps.changes.outputs.docs }}
    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect file changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            api:
              - 'src/api/**'
            web:
              - 'src/web/**'
            docs:
              - 'Docs/**'
              - 'README.md'
              - 'DEPLOYMENT_SETUP.md'

  # API Quality Checks
  api-quality:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.api-changed == 'true'
    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('src/api/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        working-directory: src/api
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov black flake8 bandit safety

      - name: Code formatting check (Black)
        working-directory: src/api
        run: |
          echo "🎨 Checking code formatting..."
          black --check --diff .

      - name: Linting (Flake8)
        working-directory: src/api
        run: |
          echo "🔍 Running linting checks..."
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Security scan (Bandit)
        working-directory: src/api
        run: |
          echo "🔒 Running security scan..."
          bandit -r . -f json -o bandit-report.json || true
          bandit -r . --format txt

      - name: Dependency vulnerability check (Safety)
        working-directory: src/api
        run: |
          echo "🛡️ Checking for known vulnerabilities..."
          safety check --json --output safety-report.json || true
          safety check

      - name: Run tests with coverage
        working-directory: src/api
        run: |
          echo "🧪 Running API tests..."
          pytest --cov=. --cov-report=xml --cov-report=term-missing --junitxml=pytest-report.xml -v

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: api-test-results
          path: |
            src/api/pytest-report.xml
            src/api/coverage.xml
            src/api/bandit-report.json
            src/api/safety-report.json

      - name: Comment test coverage on PR
        if: github.event_name == 'pull_request'
        uses: 5monkeys/cobertura-action@master
        with:
          path: src/api/coverage.xml
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          minimum_coverage: 75

  # Web Quality Checks
  web-quality:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.web-changed == 'true'
    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: src/web/package-lock.json

      - name: Install dependencies
        working-directory: src/web
        run: |
          echo "📦 Installing dependencies..."
          npm ci

      - name: TypeScript type checking
        working-directory: src/web
        run: |
          echo "🔍 Type checking..."
          npm run type-check

      - name: Linting (ESLint)
        working-directory: src/web
        run: |
          echo "🧹 Running linting..."
          npm run lint

      - name: Code formatting check (Prettier)
        working-directory: src/web
        run: |
          echo "🎨 Checking code formatting..."
          npm run format:check

      - name: Run tests
        working-directory: src/web
        run: |
          echo "🧪 Running web tests..."
          npm run test -- --coverage --watchAll=false

      - name: Build application
        working-directory: src/web
        run: |
          echo "🏗️ Building application..."
          npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: web-build
          path: src/web/dist

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: web-test-results
          path: |
            src/web/coverage/
            src/web/test-results.xml

  # Docker Build Validation
  docker-validation:
    runs-on: ubuntu-latest
    needs: [detect-changes, api-quality, web-quality]
    if: always() && (needs.api-quality.result != 'failure' && needs.web-quality.result != 'failure')
    strategy:
      matrix:
        service: [api, web]
        include:
          - service: api
            condition: needs.detect-changes.outputs.api-changed == 'true'
          - service: web
            condition: needs.detect-changes.outputs.web-changed == 'true'
    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v4
        if: matrix.condition

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        if: matrix.condition

      - name: Build Docker image
        uses: docker/build-push-action@v5
        if: matrix.condition
        with:
          context: ./src/${{ matrix.service }}
          file: ./src/${{ matrix.service }}/Dockerfile
          push: false
          tags: ${{ matrix.service }}:test
          cache-from: type=gha,scope=${{ matrix.service }}
          cache-to: type=gha,mode=max,scope=${{ matrix.service }}
          platforms: linux/amd64

      - name: Run container security scan
        if: matrix.condition
        run: |
          echo "🔍 Running container security scan..."
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            -v $(pwd):/tmp aquasec/trivy:latest image \
            --format table --exit-code 1 --severity HIGH,CRITICAL \
            ${{ matrix.service }}:test || true

  # Documentation checks
  docs-quality:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.docs-changed == 'true'
    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v4

      - name: Check markdown links
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: 'yes'
          use-verbose-mode: 'yes'
          config-file: '.github/markdown-link-check-config.json'

      - name: Spell check
        uses: streetsidesoftware/cspell-action@v2
        with:
          files: |
            **/*.md
            **/*.txt
          config: '.github/cspell.json'

  # Aggregate results
  quality-gate:
    runs-on: ubuntu-latest
    needs: [api-quality, web-quality, docker-validation, docs-quality]
    if: always()
    steps:
      - name: Check quality gate
        run: |
          echo "🎯 Quality Gate Results:"
          echo "API Quality: ${{ needs.api-quality.result }}"
          echo "Web Quality: ${{ needs.web-quality.result }}"
          echo "Docker Validation: ${{ needs.docker-validation.result }}"
          echo "Docs Quality: ${{ needs.docs-quality.result }}"
          
          # Determine overall result
          if [[ "${{ needs.api-quality.result }}" == "failure" ]] || \
             [[ "${{ needs.web-quality.result }}" == "failure" ]] || \
             [[ "${{ needs.docker-validation.result }}" == "failure" ]] || \
             [[ "${{ needs.docs-quality.result }}" == "failure" ]]; then
            echo "❌ Quality gate failed - please fix issues before deployment"
            exit 1
          else
            echo "✅ Quality gate passed - ready for deployment!"
          fi

      - name: Create quality report
        if: always()
        run: |
          cat >> $GITHUB_STEP_SUMMARY << EOF
          ## 🎯 Code Quality Report
          
          ### Quality Checks Results
          
          | Check | Status | Notes |
          |-------|--------|-------|
          | API Quality | ${{ needs.api-quality.result == 'success' && '✅ Passed' || needs.api-quality.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} | Code formatting, linting, security, tests |
          | Web Quality | ${{ needs.web-quality.result == 'success' && '✅ Passed' || needs.web-quality.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} | TypeScript, linting, formatting, tests |
          | Docker Build | ${{ needs.docker-validation.result == 'success' && '✅ Passed' || needs.docker-validation.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} | Container builds and security scan |
          | Documentation | ${{ needs.docs-quality.result == 'success' && '✅ Passed' || needs.docs-quality.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} | Link validation and spell check |
          
          ### 📋 Quality Standards
          - **Code Coverage**: Minimum 75% for API
          - **Security**: No HIGH/CRITICAL vulnerabilities
          - **Formatting**: Black (Python), Prettier (TypeScript)
          - **Linting**: Flake8 (Python), ESLint (TypeScript)
          - **Type Safety**: TypeScript strict mode
          
          EOF
